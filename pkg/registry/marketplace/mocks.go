// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: OneClickService)
//
// Generated by this command:
//
//	mockgen -destination=mocks.go -package marketplace github.com/digitalocean/godo OneClickService
//

// Package marketplace is a generated GoMock package.
package marketplace

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockOneClickService is a mock of OneClickService interface.
type MockOneClickService struct {
	ctrl     *gomock.Controller
	recorder *MockOneClickServiceMockRecorder
	isgomock struct{}
}

// MockOneClickServiceMockRecorder is the mock recorder for MockOneClickService.
type MockOneClickServiceMockRecorder struct {
	mock *MockOneClickService
}

// NewMockOneClickService creates a new mock instance.
func NewMockOneClickService(ctrl *gomock.Controller) *MockOneClickService {
	mock := &MockOneClickService{ctrl: ctrl}
	mock.recorder = &MockOneClickServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOneClickService) EXPECT() *MockOneClickServiceMockRecorder {
	return m.recorder
}

// InstallKubernetes mocks base method.
func (m *MockOneClickService) InstallKubernetes(arg0 context.Context, arg1 *godo.InstallKubernetesAppsRequest) (*godo.InstallKubernetesAppsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallKubernetes", arg0, arg1)
	ret0, _ := ret[0].(*godo.InstallKubernetesAppsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstallKubernetes indicates an expected call of InstallKubernetes.
func (mr *MockOneClickServiceMockRecorder) InstallKubernetes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallKubernetes", reflect.TypeOf((*MockOneClickService)(nil).InstallKubernetes), arg0, arg1)
}

// List mocks base method.
func (m *MockOneClickService) List(arg0 context.Context, arg1 string) ([]*godo.OneClick, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*godo.OneClick)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOneClickServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOneClickService)(nil).List), arg0, arg1)
}
